# Programa de consulta de CEP no site cepaberto.com

# Busca do CEP pelo número
# Link: http://www.cepaberto.com/api/v3/cep?cep=40010000

# Importar biblioteca
import pandas as pd
import requests
import csv

listaCep = [
64002350,64002490,64002500,64002505,64002600,64002603,64002620,64002920,64003000,64003140,64003200,64003330,64003400,64003500,64003530,64003580,64003600,
64003680,64003700,64003720,64003800,64003850,64004090,64004215,64004265,64004285,64004310,64004470,64004490,64004500,64004550,64004620,64004640,64004740,
64004823,64005230,64005280,64005300,64005350,64005355,64005370,64005405,64005518,64005710,64006006,64006140,64006180,64006220,64006245,64006250,64006470,
64006520,64006600,64006700,64007090,64007150,64007230,64007250,64007390,64007420,64007450,64007470,64007500,64007592,64007600,64007650,64007800,64007850,
64008010,64008090,64008190,64008230,64008300,64008320,64008350,64008362,64008377,64008400,64008500,64009075,64009170,64009215,64009230,64009250,64009330,
64009390,64009450,64009490,64009500,64009600,64009610,64009700,64009770,64009838,64010000,64010050,64010065,64010150,64010160,64010170,64010180,64010190,
64010200,64010280,64010290,64010380,64010390,64010395,64010410,64010475,64010540,64010680,64010790,64010800,64010831,64011010,64011025,64011030,64011500,
64012100,64012125,64012323,64012350,64012351,64012370,64012430,64012450,64012575,64012590,64012600,64012610,64012640,64012660,64012760,64012780,64012840,
64012870,64013000,64013146,64013455,64013474,64013487,64013495,64013574,64013589,64013600,64013604,64013609,64014020,64014050,64014055,64014063,64014070,
64014080,64014220,64014300,64014325,64015020,64015300,64015310,64015315,64015450,64015460,64015465,64016050,64016088,64016112,64016180,64016190,64016220,
64016390,64016498,64016530,64016635,64016817,64017090,64017170,64017175,64017280,64017310,64017350,64017380,64017565,64017570,64017575,64017615,64017650,
64017680,64017705,64017760,64017780,64017810,64018000,64018130,64018230,64018400,64018510,64018630,64018900,64019230,64019480,64019580,64019610,64019630,
64019650,64019655,64019808,64019814,64019825,64022855,64023650,64025469,64028787,64030005,64030010,64030060,64030080,64030100,64031050,64031180,64031260,
64031315,64031336,64031480,64032510,64033070,64033450,64033564,64033654,64033660,64033720,64033750,64034070,64034140,64034155,64034278,64034280,64034360,
64034400,64034442,64034602,64034640,64034752,64034850,64035035,64036750,64036800,64037025,64037304,64037430,64037440,64037470,64037490,64037674,64038030,
64039050,64039340,64039430,64039480,64039485,64039504,64039514,64039522,64039534,64039538,64039546,64039555,64039568,64039570,64039650,64039652,64039991,
64040850,64052800,64055535,64057980,64062000,64071460,64071640,64073020,64073183,64073220,64074990,64074994,64075005,64075050,64075080,64075507,64075532,
64075535,64076005,64076040,64076050,64076215,64076230,64076380,64076410,64076430,64076448,64076500,64077016,64077070,64077100,64077105,64077110,64077125,
64077130,64077150,64077175,64077185,64077235,64077260,64077270,64077280,64077282,64077292,64077302,64077306,64077378,64077408,64077420,64077423,64077450,
64077785,64077787,64077805,64077815,64077820,64077840,64078010,64078030,64078050,64078110,64078140,64078150,64078200,64078213,64078224,64078225,64078250,
64078271,64078274,64078312,64078344,64078380,64078386,64078390,64078400,64078425,64078467,64078472,64078485,64078509,64078510,64078515,64078540,64078600,
64078625,64078635,64078650,64078680,64078690,64078735,64078740,64078750,64078770,64078840,64079060,64079095,64079100,64079110,64079112,64079125,64079135,
64079140,64079160,64079205,64082092,64085500,64200000,64202000,64204450,64206240,64208010,64208175,64208345,64210260,64212100,64215250,64215400,64600000,
64600002,64600004,64600008,64600010,64600012,64600022,64600026,64600028,64600046,64600052,64600056,64600082,64600098,64600100,64600106,64600108,64600114,
64600148,64600152,64600156,64600158,64600162,64600170,64600180,64600312,64600314,64600320,64600326,64600388,64600430,64600535,64600538,64600574,64600589,
64600610,64600970,64601002,64601008,64601028,64601040,64601045,64601140,64601219,64601273,64601300,64601309,64601343,64601349,64601352,64601370,64601382,
64601533,64601560,64601575,64603000,64603003,64603090,64603130,64603350,64604090,64604144,64604380,64605015,64605502,64606180,64606280,64606340,64607030,
64607165,64607240,64607275,64607515,64607675,64607685,64607750,64607755,64607760,64607780,64607835,64607840,64608355,64608899,64691195,64800000,64800002,
64800004,64800006,64800022,64800024,64800026,64800062,64800074,64800082,64800116,64800120,64800128,64800132,64800152,64800158,64800280,64800375,64800425,
64800870,64803045,64803150,64803200,64803245,64803250,64803252,64803570,64804140,64804230,64804280,64804330,64804375,64806090,64806360,64806605,64806730,
64807050,64807150,64807310,64807730,64808250,64808305,64808395,64808480,64808605,64808747
]

print('-' * 50)
print('Busca de CEP pelo número.')
print('-' * 50)

#Incluir a cidade e o estado

print('Devido ao limite de consultas diárias, e recomendado que você pesquisa os CEPs por cidade/estado.\n')
print('Incluir os dados da cidade e estado que você está pesquisando.')
	
cidade = input('Cidade: ')
estado = input('Estado(UF - Exemplo PA): ')

print('Informa o nome do arquivo aonde será salvo os CEPs encontrados.')
print('Obs.: É necessário incluir a extensão do arquivo csv.')
file_name = input('Nome do arquivo (exemplo ceps.csv):')

for i in listaCep:
	url = ('http://www.cepaberto.com/api/v3/cep?cep=%s' %i)
	print(url)
	
	#Token de autorização de consulta
	TOKEN = '9532b77499f0ed6e44a9df4a38269ebb'
	
	auth = {'Authorization': 'Token token=%s' % TOKEN}
	
	#Passar a consulta para o site
	resposta = requests.get(url, headers=auth)
	try:
		df = pd.DataFrame(resposta.json(), index=[0])
	
		df.columns = ['Altitude','Cep','Latitude','Longitude','Logradouro','Bairro','Cidade','Estado']
		
		
		#Dados da Cidade e do Estado inseridos manualmente
		df['Cidade'] = cidade.upper()
		df['Estado'] = estado.upper()
	
		print(df.head(10))
	
		file = ('C:/Users/frank/Documents/BcGestao/01-Projetos/JSB Teresina/BI/%s' %file_name)
	
		if file == False:
			openFile = open(file,mode='w', newline='')
			df.to_csv(openFile, sep=';', encoding='utf-8', index=False, columns=['Cep','Cidade','Estado','Bairro','Logradouro'])
			openFile.close()
	
		else:
			openFile = open(file,mode='a', newline='')
			df.to_csv(openFile, sep=';', encoding='utf-8', index=False, columns=['Cep','Cidade','Estado','Bairro','Logradouro'], header=False)
			openFile.close()
	except ValueError:
		print('Cep não encontrado!')
		
		ceps = str(i)
		
		print(ceps)
		
		with open('C:/Users/frank/Documents/BcGestao/01-Projetos/JSB Teresina/BI/ceps_log.csv',mode='a', newline='') as logFile:
				logCep = csv.writer(logFile, delimiter=';')
				logCep.writerow(ceps)
		logFile.close()
		